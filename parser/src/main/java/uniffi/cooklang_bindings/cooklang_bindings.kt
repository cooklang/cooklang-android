// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package uniffi.cooklang_bindings

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the details of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.IntegerType
import com.sun.jna.Library
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.ptr.*
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.nio.CharBuffer
import java.nio.charset.CodingErrorAction
import java.util.concurrent.ConcurrentHashMap

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    @JvmField var capacity: Int = 0

    @JvmField var len: Int = 0

    @JvmField var data: Pointer? = null

    class ByValue : RustBuffer(), Structure.ByValue
    class ByReference : RustBuffer(), Structure.ByReference

    companion object {
        internal fun alloc(size: Int = 0) = rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_cooklang_bindings_rustbuffer_alloc(size, status)
        }.also {
            if (it.data == null) {
                throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=$size)")
            }
        }

        internal fun free(buf: RustBuffer.ByValue) = rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_cooklang_bindings_rustbuffer_free(buf, status)
        }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

/**
 * The equivalent of the `*mut RustBuffer` type.
 * Required for callbacks taking in an out pointer.
 *
 * Size is the sum of all values in the struct.
 */
class RustBufferByReference : ByReference(16) {
    /**
     * Set the pointed-to `RustBuffer` to the given value.
     */
    fun setValue(value: RustBuffer.ByValue) {
        // NOTE: The offsets are as they are in the C-like struct.
        val pointer = getPointer()
        pointer.setInt(0, value.capacity)
        pointer.setInt(4, value.len)
        pointer.setPointer(8, value.data)
    }

    /**
     * Get a `RustBuffer.ByValue` from this reference.
     */
    fun getValue(): RustBuffer.ByValue {
        val pointer = getPointer()
        val value = RustBuffer.ByValue()
        value.writeField("capacity", pointer.getInt(0))
        value.writeField("len", pointer.getInt(4))
        value.writeField("data", pointer.getPointer(8))

        return value
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0

    @JvmField var data: Pointer? = null

    class ByValue : ForeignBytes(), Structure.ByValue
}

// The FfiConverter interface handles converter types to and from the FFI
//
// All implementing objects should be public to support external types.  When a
// type is external we need to import it's FfiConverter.
public interface FfiConverter<KotlinType, FfiType> {
    // Convert an FFI type to a Kotlin type
    fun lift(value: FfiType): KotlinType

    // Convert an Kotlin type to an FFI type
    fun lower(value: KotlinType): FfiType

    // Read a Kotlin type from a `ByteBuffer`
    fun read(buf: ByteBuffer): KotlinType

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    fun allocationSize(value: KotlinType): Int

    // Write a Kotlin type to a `ByteBuffer`
    fun write(value: KotlinType, buf: ByteBuffer)

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    fun lowerIntoRustBuffer(value: KotlinType): RustBuffer.ByValue {
        val rbuf = RustBuffer.alloc(allocationSize(value))
        try {
            val bbuf = rbuf.data!!.getByteBuffer(0, rbuf.capacity.toLong()).also {
                it.order(ByteOrder.BIG_ENDIAN)
            }
            write(value, bbuf)
            rbuf.writeField("len", bbuf.position())
            return rbuf
        } catch (e: Throwable) {
            RustBuffer.free(rbuf)
            throw e
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    fun liftFromRustBuffer(rbuf: RustBuffer.ByValue): KotlinType {
        val byteBuf = rbuf.asByteBuffer()!!
        try {
            val item = read(byteBuf)
            if (byteBuf.hasRemaining()) {
                throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
            }
            return item
        } finally {
            RustBuffer.free(rbuf)
        }
    }
}

// FfiConverter that uses `RustBuffer` as the FfiType
public interface FfiConverterRustBuffer<KotlinType> : FfiConverter<KotlinType, RustBuffer.ByValue> {
    override fun lift(value: RustBuffer.ByValue) = liftFromRustBuffer(value)
    override fun lower(value: KotlinType) = lowerIntoRustBuffer(value)
}

// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.
// Error runtime.
@Structure.FieldOrder("code", "error_buf")
internal open class RustCallStatus : Structure() {
    @JvmField var code: Byte = 0

    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    class ByValue : RustCallStatus(), Structure.ByValue

    fun isSuccess(): Boolean {
        return code == 0.toByte()
    }

    fun isError(): Boolean {
        return code == 1.toByte()
    }

    fun isPanic(): Boolean {
        return code == 2.toByte()
    }
}

class InternalException(message: String) : Exception(message)

// Each top-level error class has a companion object that can lift the error from the call status's rust buffer
interface CallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E : Exception> rustCallWithError(errorHandler: CallStatusErrorHandler<E>, callback: (RustCallStatus) -> U): U {
    var status = RustCallStatus()
    val return_value = callback(status)
    checkCallStatus(errorHandler, status)
    return return_value
}

// Check RustCallStatus and throw an error if the call wasn't successful
private fun<E : Exception> checkCallStatus(errorHandler: CallStatusErrorHandler<E>, status: RustCallStatus) {
    if (status.isSuccess()) {
        return
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(FfiConverterString.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

// CallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
object NullCallStatusErrorHandler : CallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> rustCall(callback: (RustCallStatus) -> U): U {
    return rustCallWithError(NullCallStatusErrorHandler, callback)
}

// IntegerType that matches Rust's `usize` / C's `size_t`
public class USize(value: Long = 0) : IntegerType(Native.SIZE_T_SIZE, value, true) {
    // This is needed to fill in the gaps of IntegerType's implementation of Number for Kotlin.
    override fun toByte() = toInt().toByte()

    // Needed until https://youtrack.jetbrains.com/issue/KT-47902 is fixed.
    @Deprecated("`toInt().toChar()` is deprecated")
    override fun toChar() = toInt().toChar()
    override fun toShort() = toInt().toShort()

    fun writeToBuffer(buf: ByteBuffer) {
        // Make sure we always write usize integers using native byte-order, since they may be
        // casted to pointer values
        buf.order(ByteOrder.nativeOrder())
        try {
            when (Native.SIZE_T_SIZE) {
                4 -> buf.putInt(toInt())
                8 -> buf.putLong(toLong())
                else -> throw RuntimeException("Invalid SIZE_T_SIZE: ${Native.SIZE_T_SIZE}")
            }
        } finally {
            buf.order(ByteOrder.BIG_ENDIAN)
        }
    }

    companion object {
        val size: Int
            get() = Native.SIZE_T_SIZE

        fun readFromBuffer(buf: ByteBuffer): USize {
            // Make sure we always read usize integers using native byte-order, since they may be
            // casted from pointer values
            buf.order(ByteOrder.nativeOrder())
            try {
                return when (Native.SIZE_T_SIZE) {
                    4 -> USize(buf.getInt().toLong())
                    8 -> USize(buf.getLong())
                    else -> throw RuntimeException("Invalid SIZE_T_SIZE: ${Native.SIZE_T_SIZE}")
                }
            } finally {
                buf.order(ByteOrder.BIG_ENDIAN)
            }
        }
    }
}

// Map handles to objects
//
// This is used when the Rust code expects an opaque pointer to represent some foreign object.
// Normally we would pass a pointer to the object, but JNA doesn't support getting a pointer from an
// object reference , nor does it support leaking a reference to Rust.
//
// Instead, this class maps USize values to objects so that we can pass a pointer-sized type to
// Rust when it needs an opaque pointer.
//
// TODO: refactor callbacks to use this class
internal class UniFfiHandleMap<T : Any> {
    private val map = ConcurrentHashMap<USize, T>()

    // Use AtomicInteger for our counter, since we may be on a 32-bit system.  4 billion possible
    // values seems like enough. If somehow we generate 4 billion handles, then this will wrap
    // around back to zero and we can assume the first handle generated will have been dropped by
    // then.
    private val counter = java.util.concurrent.atomic.AtomicInteger(0)

    val size: Int
        get() = map.size

    fun insert(obj: T): USize {
        val handle = USize(counter.getAndAdd(1).toLong())
        map.put(handle, obj)
        return handle
    }

    fun get(handle: USize): T? {
        return map.get(handle)
    }

    fun remove(handle: USize) {
        map.remove(handle)
    }
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "cooklang_bindings"
}

private inline fun <reified Lib : Library> loadIndirect(
    componentName: String,
): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.

internal interface _UniFFILib : Library {
    companion object {
        internal val INSTANCE: _UniFFILib by lazy {
            loadIndirect<_UniFFILib>(componentName = "cooklang_bindings")
                .also { lib: _UniFFILib ->
                    uniffiCheckContractApiVersion(lib)
                    uniffiCheckApiChecksums(lib)
                }
        }
    }

    fun uniffi_cooklang_bindings_fn_func_parse(
        `input`: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus,
    ): RustBuffer.ByValue
    fun uniffi_cooklang_bindings_fn_func_parse_metadata(
        `input`: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus,
    ): RustBuffer.ByValue
    fun ffi_cooklang_bindings_rustbuffer_alloc(
        `size`: Int,
        _uniffi_out_err: RustCallStatus,
    ): RustBuffer.ByValue
    fun ffi_cooklang_bindings_rustbuffer_from_bytes(
        `bytes`: ForeignBytes.ByValue,
        _uniffi_out_err: RustCallStatus,
    ): RustBuffer.ByValue
    fun ffi_cooklang_bindings_rustbuffer_free(
        `buf`: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus,
    ): Unit
    fun ffi_cooklang_bindings_rustbuffer_reserve(
        `buf`: RustBuffer.ByValue,
        `additional`: Int,
        _uniffi_out_err: RustCallStatus,
    ): RustBuffer.ByValue
    fun uniffi_cooklang_bindings_checksum_func_parse(): Short
    fun uniffi_cooklang_bindings_checksum_func_parse_metadata(): Short
    fun ffi_cooklang_bindings_uniffi_contract_version(): Int
}

private fun uniffiCheckContractApiVersion(lib: _UniFFILib) {
    // Get the bindings contract version from our ComponentInterface
    val bindings_contract_version = 23
    // Get the scaffolding contract version by calling the into the dylib
    val scaffolding_contract_version = lib.ffi_cooklang_bindings_uniffi_contract_version()
    if (bindings_contract_version != scaffolding_contract_version) {
        throw RuntimeException("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    }
}

@Suppress("UNUSED_PARAMETER")
private fun uniffiCheckApiChecksums(lib: _UniFFILib) {
    if (lib.uniffi_cooklang_bindings_checksum_func_parse() != 49624.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cooklang_bindings_checksum_func_parse_metadata() != 7724.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// Public interface members begin here.

public object FfiConverterDouble : FfiConverter<Double, Double> {
    override fun lift(value: Double): Double {
        return value
    }

    override fun read(buf: ByteBuffer): Double {
        return buf.getDouble()
    }

    override fun lower(value: Double): Double {
        return value
    }

    override fun allocationSize(value: Double) = 8

    override fun write(value: Double, buf: ByteBuffer) {
        buf.putDouble(value)
    }
}

public object FfiConverterString : FfiConverter<String, RustBuffer.ByValue> {
    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    override fun lift(value: RustBuffer.ByValue): String {
        try {
            val byteArr = ByteArray(value.len)
            value.asByteBuffer()!!.get(byteArr)
            return byteArr.toString(Charsets.UTF_8)
        } finally {
            RustBuffer.free(value)
        }
    }

    override fun read(buf: ByteBuffer): String {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    }

    fun toUtf8(value: String): ByteBuffer {
        // Make sure we don't have invalid UTF-16, check for lone surrogates.
        return Charsets.UTF_8.newEncoder().run {
            onMalformedInput(CodingErrorAction.REPORT)
            encode(CharBuffer.wrap(value))
        }
    }

    override fun lower(value: String): RustBuffer.ByValue {
        val byteBuf = toUtf8(value)
        // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
        // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
        val rbuf = RustBuffer.alloc(byteBuf.limit())
        rbuf.asByteBuffer()!!.put(byteBuf)
        return rbuf
    }

    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per UTF-16 code unit which will always be
    // enough.
    override fun allocationSize(value: String): Int {
        val sizeForLength = 4
        val sizeForString = value.length * 3
        return sizeForLength + sizeForString
    }

    override fun write(value: String, buf: ByteBuffer) {
        val byteBuf = toUtf8(value)
        buf.putInt(byteBuf.limit())
        buf.put(byteBuf)
    }
}

data class Amount(
    var `quantity`: Value,
    var `units`: String?,
)

public object FfiConverterTypeAmount : FfiConverterRustBuffer<Amount> {
    override fun read(buf: ByteBuffer): Amount {
        return Amount(
            FfiConverterTypeValue.read(buf),
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: Amount) = (
        FfiConverterTypeValue.allocationSize(value.`quantity`) +
            FfiConverterOptionalString.allocationSize(value.`units`)
        )

    override fun write(value: Amount, buf: ByteBuffer) {
        FfiConverterTypeValue.write(value.`quantity`, buf)
        FfiConverterOptionalString.write(value.`units`, buf)
    }
}

data class CooklangRecipe(
    var `metadata`: Map<String, String>,
    var `steps`: List<Step>,
    var `ingredients`: List<Item>,
    var `cookware`: List<Item>,
)

public object FfiConverterTypeCooklangRecipe : FfiConverterRustBuffer<CooklangRecipe> {
    override fun read(buf: ByteBuffer): CooklangRecipe {
        return CooklangRecipe(
            FfiConverterMapStringString.read(buf),
            FfiConverterSequenceTypeStep.read(buf),
            FfiConverterSequenceTypeItem.read(buf),
            FfiConverterSequenceTypeItem.read(buf),
        )
    }

    override fun allocationSize(value: CooklangRecipe) = (
        FfiConverterMapStringString.allocationSize(value.`metadata`) +
            FfiConverterSequenceTypeStep.allocationSize(value.`steps`) +
            FfiConverterSequenceTypeItem.allocationSize(value.`ingredients`) +
            FfiConverterSequenceTypeItem.allocationSize(value.`cookware`)
        )

    override fun write(value: CooklangRecipe, buf: ByteBuffer) {
        FfiConverterMapStringString.write(value.`metadata`, buf)
        FfiConverterSequenceTypeStep.write(value.`steps`, buf)
        FfiConverterSequenceTypeItem.write(value.`ingredients`, buf)
        FfiConverterSequenceTypeItem.write(value.`cookware`, buf)
    }
}

data class Step(
    var `items`: List<Item>,
)

public object FfiConverterTypeStep : FfiConverterRustBuffer<Step> {
    override fun read(buf: ByteBuffer): Step {
        return Step(
            FfiConverterSequenceTypeItem.read(buf),
        )
    }

    override fun allocationSize(value: Step) = (
        FfiConverterSequenceTypeItem.allocationSize(value.`items`)
        )

    override fun write(value: Step, buf: ByteBuffer) {
        FfiConverterSequenceTypeItem.write(value.`items`, buf)
    }
}

sealed class Item {
    data class Text(
        val `value`: String,
    ) : Item()
    data class Ingredient(
        val `name`: String,
        val `amount`: Amount?,
    ) : Item()
    data class Cookware(
        val `name`: String,
        val `amount`: Amount?,
    ) : Item()
    data class Timer(
        val `name`: String?,
        val `amount`: Amount?,
    ) : Item()
}

public object FfiConverterTypeItem : FfiConverterRustBuffer<Item> {
    override fun read(buf: ByteBuffer): Item {
        return when (buf.getInt()) {
            1 -> Item.Text(
                FfiConverterString.read(buf),
            )
            2 -> Item.Ingredient(
                FfiConverterString.read(buf),
                FfiConverterOptionalTypeAmount.read(buf),
            )
            3 -> Item.Cookware(
                FfiConverterString.read(buf),
                FfiConverterOptionalTypeAmount.read(buf),
            )
            4 -> Item.Timer(
                FfiConverterOptionalString.read(buf),
                FfiConverterOptionalTypeAmount.read(buf),
            )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: Item) = when (value) {
        is Item.Text -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4 +
                    FfiConverterString.allocationSize(value.`value`)
                )
        }
        is Item.Ingredient -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4 +
                    FfiConverterString.allocationSize(value.`name`) +
                    FfiConverterOptionalTypeAmount.allocationSize(value.`amount`)
                )
        }
        is Item.Cookware -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4 +
                    FfiConverterString.allocationSize(value.`name`) +
                    FfiConverterOptionalTypeAmount.allocationSize(value.`amount`)
                )
        }
        is Item.Timer -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4 +
                    FfiConverterOptionalString.allocationSize(value.`name`) +
                    FfiConverterOptionalTypeAmount.allocationSize(value.`amount`)
                )
        }
    }

    override fun write(value: Item, buf: ByteBuffer) {
        when (value) {
            is Item.Text -> {
                buf.putInt(1)
                FfiConverterString.write(value.`value`, buf)
                Unit
            }
            is Item.Ingredient -> {
                buf.putInt(2)
                FfiConverterString.write(value.`name`, buf)
                FfiConverterOptionalTypeAmount.write(value.`amount`, buf)
                Unit
            }
            is Item.Cookware -> {
                buf.putInt(3)
                FfiConverterString.write(value.`name`, buf)
                FfiConverterOptionalTypeAmount.write(value.`amount`, buf)
                Unit
            }
            is Item.Timer -> {
                buf.putInt(4)
                FfiConverterOptionalString.write(value.`name`, buf)
                FfiConverterOptionalTypeAmount.write(value.`amount`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}

sealed class Value {
    data class Number(
        val `value`: Double,
    ) : Value()
    data class Range(
        val `start`: Double,
        val `end`: Double,
    ) : Value()
    data class Text(
        val `value`: String,
    ) : Value()
}

public object FfiConverterTypeValue : FfiConverterRustBuffer<Value> {
    override fun read(buf: ByteBuffer): Value {
        return when (buf.getInt()) {
            1 -> Value.Number(
                FfiConverterDouble.read(buf),
            )
            2 -> Value.Range(
                FfiConverterDouble.read(buf),
                FfiConverterDouble.read(buf),
            )
            3 -> Value.Text(
                FfiConverterString.read(buf),
            )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: Value) = when (value) {
        is Value.Number -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4 +
                    FfiConverterDouble.allocationSize(value.`value`)
                )
        }
        is Value.Range -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4 +
                    FfiConverterDouble.allocationSize(value.`start`) +
                    FfiConverterDouble.allocationSize(value.`end`)
                )
        }
        is Value.Text -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4 +
                    FfiConverterString.allocationSize(value.`value`)
                )
        }
    }

    override fun write(value: Value, buf: ByteBuffer) {
        when (value) {
            is Value.Number -> {
                buf.putInt(1)
                FfiConverterDouble.write(value.`value`, buf)
                Unit
            }
            is Value.Range -> {
                buf.putInt(2)
                FfiConverterDouble.write(value.`start`, buf)
                FfiConverterDouble.write(value.`end`, buf)
                Unit
            }
            is Value.Text -> {
                buf.putInt(3)
                FfiConverterString.write(value.`value`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}

public object FfiConverterOptionalString : FfiConverterRustBuffer<String?> {
    override fun read(buf: ByteBuffer): String? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterString.read(buf)
    }

    override fun allocationSize(value: String?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterString.allocationSize(value)
        }
    }

    override fun write(value: String?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterString.write(value, buf)
        }
    }
}

public object FfiConverterOptionalTypeAmount : FfiConverterRustBuffer<Amount?> {
    override fun read(buf: ByteBuffer): Amount? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeAmount.read(buf)
    }

    override fun allocationSize(value: Amount?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeAmount.allocationSize(value)
        }
    }

    override fun write(value: Amount?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeAmount.write(value, buf)
        }
    }
}

public object FfiConverterSequenceTypeStep : FfiConverterRustBuffer<List<Step>> {
    override fun read(buf: ByteBuffer): List<Step> {
        val len = buf.getInt()
        return List<Step>(len) {
            FfiConverterTypeStep.read(buf)
        }
    }

    override fun allocationSize(value: List<Step>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeStep.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Step>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeStep.write(it, buf)
        }
    }
}

public object FfiConverterSequenceTypeItem : FfiConverterRustBuffer<List<Item>> {
    override fun read(buf: ByteBuffer): List<Item> {
        val len = buf.getInt()
        return List<Item>(len) {
            FfiConverterTypeItem.read(buf)
        }
    }

    override fun allocationSize(value: List<Item>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeItem.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Item>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeItem.write(it, buf)
        }
    }
}

public object FfiConverterMapStringString : FfiConverterRustBuffer<Map<String, String>> {
    override fun read(buf: ByteBuffer): Map<String, String> {
        // TODO: Once Kotlin's `buildMap` API is stabilized we should use it here.
        val items: MutableMap<String, String> = mutableMapOf()
        val len = buf.getInt()
        repeat(len) {
            val k = FfiConverterString.read(buf)
            val v = FfiConverterString.read(buf)
            items[k] = v
        }
        return items
    }

    override fun allocationSize(value: Map<String, String>): Int {
        val spaceForMapSize = 4
        val spaceForChildren = value.map { (k, v) ->
            FfiConverterString.allocationSize(k) +
                FfiConverterString.allocationSize(v)
        }.sum()
        return spaceForMapSize + spaceForChildren
    }

    override fun write(value: Map<String, String>, buf: ByteBuffer) {
        buf.putInt(value.size)
        // The parens on `(k, v)` here ensure we're calling the right method,
        // which is important for compatibility with older android devices.
        // Ref https://blog.danlew.net/2017/03/16/kotlin-puzzler-whose-line-is-it-anyways/
        value.forEach { (k, v) ->
            FfiConverterString.write(k, buf)
            FfiConverterString.write(v, buf)
        }
    }
}

fun `parse`(`input`: String): CooklangRecipe {
    return FfiConverterTypeCooklangRecipe.lift(
        rustCall() { _status ->
            _UniFFILib.INSTANCE.uniffi_cooklang_bindings_fn_func_parse(FfiConverterString.lower(`input`), _status)
        },
    )
}

fun `parseMetadata`(`input`: String): Map<String, String> {
    return FfiConverterMapStringString.lift(
        rustCall() { _status ->
            _UniFFILib.INSTANCE.uniffi_cooklang_bindings_fn_func_parse_metadata(FfiConverterString.lower(`input`), _status)
        },
    )
}
