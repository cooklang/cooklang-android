plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'maven-publish'
}

def gprProperties = new Properties()
file("../gpr.properties").withInputStream { gprProperties.load(it) }

ext {
    versionName = "0.1.7"
}

android {
    namespace 'org.cooklang.sync'
    compileSdk 34

    defaultConfig {
        minSdk 26


        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }
    }

    sourceSets {
        main {
            java.srcDirs = ["src/main/kotlin"]
            jniLibs.srcDirs = ["src/main/jniLibs"]
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17
    }

    packagingOptions {
        jniLibs {
            useLegacyPackaging = true
        }
    }
}

dependencies {
    implementation 'net.java.dev.jna:jna:5.13.0@aar'
    testImplementation 'junit:junit:4.13.2'
}

publishing {
    publications {
        sync(MavenPublication) {
            groupId = 'com.github.cooklang'
            artifactId = 'sync'
            version = versionName
            afterEvaluate {
                from components.release
            }

            pom {
                name = 'sync'
                description = 'Cooklang Sync Library for Android'
                url = 'https://github.com/cooklang/cooklang-android'
                licenses {
                    license {
                        name = 'The MIT License (MIT)'
                        url = 'http://opensource.org/licenses/MIT'
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'dubadub'
                        name = 'Alexey Dubovksoy'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/cooklang/cooklang-android.git'
                    developerConnection = 'scm:git:ssh://github.com:cooklang/cooklang-android.git'
                    url = 'https://github.com/cooklang/cooklang-android'
                }
            }
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/cooklang/cooklang-android")
            credentials {
                username = gprProperties['gpr.user']
                password = gprProperties['gpr.token']
            }
        }
    }
}


def rustBasePath = '../../cooklang-sync'
def archTriplets = [
        'armeabi-v7a': 'armv7-linux-androideabi',
        'arm64-v8a': 'aarch64-linux-android',
        'x86': 'i686-linux-android',
        'x86_64': 'x86_64-linux-android',
]

android.libraryVariants.all { variant ->
    def uniffiPath = "${buildDir}/../src/main/kotlin"
    def libPath = "${buildDir}/../src/main/jniLibs/arm64-v8a/libcooklang_sync_client.so"
    def configPath = "${rustBasePath}/client/uniffi.toml"
    def generateBindings = tasks.register("generate${variant.name.capitalize()}UniFFIBindings", Exec) {
        workingDir "${rustBasePath}/client"
        commandLine 'cargo', 'run', '--features=uniffi/cli', '--bin', 'uniffi-bindgen', 'generate', '--config', configPath, '--library', libPath, '--language', 'kotlin', '--out-dir', uniffiPath
    }
    variant.javaCompileProvider.get().dependsOn(generateBindings)
    def sourceSet = variant.sourceSets.find { it.name == variant.name }
    sourceSet.java.srcDir new File(uniffiPath)
}
//
//
archTriplets.each { arch, target ->
    project.ext.cargo_target_directory = rustBasePath + "/target"
    // Build with cargo
    tasks.create(name: "cargo-build-${arch}", type: Exec, description: "Building core for ${arch}") {
        workingDir "${rustBasePath}/client"
        commandLine 'cargo', 'build', '--lib', "--target=${target}", '--release'
    }

    // Sync shared native dependencies
    tasks.create(name: "sync-rust-deps-${arch}", type: Sync, dependsOn: "cargo-build-${arch}") {
        from "${project.ext.cargo_target_directory}/${archTriplets[arch]}/release"
        include "*.so"
        into "src/main/jniLibs/${arch}"
    }

    // Hook up tasks to execute before building java
    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn "sync-rust-deps-${arch}"
    }
    preBuild.dependsOn "sync-rust-deps-${arch}"

    // Hook up clean tasks
    tasks.create(name: "clean-${arch}", type: Delete, description: "Deleting built libs for ${arch}") {
        delete fileTree("${project.ext.cargo_target_directory}/${archTriplets[arch]}/release") {
            include '*.so'
        }
    }
    clean.dependsOn "clean-${arch}"
}